step "deploy-kubernetes-yaml" {
    name = "Deploy Kubernetes YAML"
    properties = {
        Octopus.Action.TargetRoles = "Kubernetes"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: apps/v1
                kind: Deployment
                metadata:
                  name: ghu2024sampleapp
                  labels:
                    app: web
                spec:
                  selector:
                    matchLabels:
                      app: web
                  replicas: 1
                  strategy:
                    type: RollingUpdate
                  template:
                    metadata:
                      labels:
                        app: web
                    spec:
                      containers:
                        - name: ghu2024sampleapp
                          image: ghcr.io/octopussolutionsengineering/ghu2024sampleapp
                          imagePullPolicy: "Always"
                          ports:
                            - containerPort: 8080
                ---
                apiVersion: v1
                kind: Service
                metadata:
                  name: ghu2024sampleapp
                  labels:
                    app: web
                spec:
                  selector:
                    app: web
                  ports:
                    - protocol: TCP
                      port: 80
                      targetPort: 8080
                ---
                apiVersion: networking.k8s.io/v1
                kind: Ingress
                metadata:
                  name: ghu2024sampleapp
                  labels:
                    app: web
                  annotations:
                    alb.ingress.kubernetes.io/scheme: internet-facing
                    alb.ingress.kubernetes.io/target-type: ip
                spec:
                  ingressClassName: alb
                  rules:
                    - http:
                        paths:
                        - path: /
                          pathType: Prefix
                          backend:
                            service:
                              name: ghu2024sampleapp
                              port:
                                number: 80
                
                EOT
            Octopus.Action.KubernetesContainers.Namespace = "#{Octopus.Environment.Name | ToLower}-#{K8s.Namespace.Name}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""

        container {
            feed = "github-container-registry"
            image = "ghcr.io/octopusdeploylabs/k8s-workertools"
        }
    }
}

step "run-a-kubectl-script" {
    name = "Run a kubectl script"
    properties = {
        Octopus.Action.TargetRoles = "Kubernetes"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.KubernetesContainers.Namespace = "#{Octopus.Environment.Name | ToLower}-#{K8s.Namespace.Name}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                kubectl get ingress
                
                ADDRESS=$(kubectl get ingress ghu2024sampleapp -o jsonpath='{.status.loadBalancer.ingress[0].address}')
                
                write_highlight "URL: [http://${ADDRESS}](http://${ADDRESS})"
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""

        container {
            feed = "github-container-registry"
            image = "ghcr.io/octopusdeploylabs/k8s-workertools"
        }
    }
}